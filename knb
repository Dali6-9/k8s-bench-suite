#!/bin/bash
###################################################################
# @Description : Kubernetes Network Benchmark
# @Author      : Alexis Ducastel <alexis@infrabuilder.com>
# @License     : MIT
###################################################################

#==============================================================================
# Utility functions
#==============================================================================

function logdate { date "+%Y-%m-%d %H:%M:%S"; }
function fatal { echo "$(logdate) [FATAL] $@" >&2; cleanandexit 1; }
function err { echo "$(logdate) [ERROR] $@" >&2; }
function warn { [$DEBUG_LEVEL -ge 1 ] && echo "$(logdate) [WARNING] $@" >&2; }
function info { [ $DEBUG_LEVEL -ge 2 ] && echo "$(logdate) [INFO] $@" >&2; }
function debug { [ $DEBUG_LEVEL -ge 3 ] && echo "$(logdate) [DEBUG] $@" >&2; }

function now { date +%s; }
function cleanandexit {
	# Cleaning Kubernetes resources
	for i in $RESSOURCE_TO_CLEAN_BEFORE_EXIT
	do
		$DEBUG && debug "Deleting resource $i"
		kubectl delete $NAMESPACEOPT $i --wait=false >/dev/null
	done
	
	# Cleaning temp directory
	if [ "$CLEANDIR" = "true" ] 
	then
		[ -d $DATADIR ] && touch $DATADIR/something && rm $DATADIR/* && rmdir $DATADIR
	else
		info "Keeping data directory, you will have to clean it manually."
		info "$DATADIR"
	fi

	exit $1
}

# Example : waitpod podname Running 60
function waitpod {
	POD=$1
	PHASE=$2
	TIMEOUT=$3
	TMAX=$(( $(now) + $TIMEOUT ))
	$DEBUG && debug "Waiting for pod $POD to be $PHASE until $TMAX"
	while [ "$(now)" -lt "$TMAX" ]
	do
		CURRENTPHASE=$(kubectl get --request-timeout 2s $NAMESPACEOPT pod $POD -o jsonpath={.status.phase})
		$DEBUG && debug "[$(now)/$TMAX] Pod $POD is in phase $CURRENTPHASE, waiting for $PHASE"
		[ "$CURRENTPHASE" = "$PHASE" ] && return 0
		sleep 1
	done
	return 1
}

#==============================================================================
# Default config
#==============================================================================

VERSION=1.0.0
DEBUG=false
DEBUG_LEVEL=0
SERVER_NODE=""
CLIENT_NODE=""
EXECID="$$"
NAMESPACEOPT=""
POD_WAIT_TIMEOUT="30"
BENCHMARK_DURATION="10"
SOCKET_BUFFER_SIZE="256K"
RESSOURCE_TO_CLEAN_BEFORE_EXIT=""
OUTPUT_FORMAT="text"
CLEANDIR="true"

#==============================================================================
# Core functions
#==============================================================================

function usage {
	cat <<-EOF

	$0 is a network benchmark tool for Kubernetes CNI
	
	Mandatory flags :
	    -cn <nodename>
	    --client-node <nodename>    : Define kubernetes node name that will host the client part
	    -sn <nodename>
	    --server-node <nodename>    : Define kubernetes node name that will host the server part
	
	Optionnal flags :
	    --debug                     : Set the debug level to "debug"
	    --debug-level <level>       : Set the debug level (values: standard, warn, info, debug) 
	    -d <time-in-scd>
	    --duration <time-in-scd>    : Set the benchmark duration for each test in seconds. (Default ${BENCHMARK_DURATION})
	    -h
	    --help                      : Display this help message
	    -k
	    --keep                      : Keep data directory instead of cleaning it (contains raw benchmark data)
	    -n <namespace>
	    --namespace <namespace>     : Set the target kubernetes namespace
	    -o <format>
	    --output <format>           : Set the output format (values: text, yaml, json)
	    -sbs <size>
	    --socket-buffer-size <size> : Set the socket buffer size (Default: $SOCKET_BUFFER_SIZE)
	    -t <time-in-scd>
	    --timeout <time-in-scd>     : Set the pod ready wait timeout in seconds. (Default ${POD_WAIT_TIMEOUT})
	    -v
	    --verbose                   : Activate the verbose mode by setting debug-level to 'info'
	    -V
	    --version                   : Show current script version

	Example : $0 -v -cn node1 -sn node2

EOF
}

function start-client {
	POD_NAME=$1
	TARGET=$2
	CMD=""
	case $3 in
		idle) CMD="sleep $BENCHMARK_DURATION; echo 0 0 0 0 0 0 0 receiver" ;;
		udp) CMD="iperf3 -u -b 0 -c $TARGET -O 1 -w $SOCKET_BUFFER_SIZE -f m -t $BENCHMARK_DURATION" ;;
		tcp) CMD="iperf3 -c $TARGET -O 1 -w $SOCKET_BUFFER_SIZE -f m -t $BENCHMARK_DURATION" ;;
		*) fatal "Unknown benchmark type '$2'" ;;
	esac

	info "Starting pod $POD_NAME on node $CLIENT_NODE"
	cat <<-EOF | kubectl apply $NAMESPACEOPT -f - >/dev/null|| fatal "Cannot create pod $POD_NAME"
	apiVersion: v1
	kind: Pod
	metadata:
	  labels:
	    app: $POD_NAME
	  name: $POD_NAME
	spec:
	  containers:
	  - name: iperf
	    image: infrabuilder/netbench:client
	    args:
	    - /bin/sh
	    - -c
	    - $CMD
	  nodeSelector:
	    kubernetes.io/hostname: $CLIENT_NODE
	  restartPolicy: Never
	EOF

	RESSOURCE_TO_CLEAN_BEFORE_EXIT="$RESSOURCE_TO_CLEAN_BEFORE_EXIT pod/$POD_NAME"

	# Waiting for Pod to be Running
	kubectl wait $NAMESPACEOPT --for=condition=Ready pod/$POD_NAME --timeout=${POD_WAIT_TIMEOUT}s >/dev/null \
		|| fatal "Failed to start pod $POD_NAME until timeout"
	
	STARTTIME=$(now)
	ENDTIME=$(( $STARTTIME + $BENCHMARK_DURATION ))

	# Waiting test duration
	$DEBUG && debug "sleeping during the benchmark duration ($BENCHMARK_DURATION) to avoid useless api calls"
	sleep $BENCHMARK_DURATION

	info "Waiting for pod $POD_NAME to be completed"
	# Waiting for test to be succeeded
	waitpod $POD_NAME Succeeded $POD_WAIT_TIMEOUT \
		|| fatal "Failed to run pod $POD_NAME until timeout"

	# Extracting data
	$DEBUG && debug "Writing $POD_NAME logs to $DATADIR/$POD_NAME.log"
	kubectl logs $NAMESPACEOPT $POD_NAME > $DATADIR/$POD_NAME.log
	grep receiver $DATADIR/$POD_NAME.log | awk '{print $7}' > $DATADIR/$POD_NAME.bw
	$DEBUG && debug "$POD_NAME Bandwidth = $(cat $DATADIR/$POD_NAME.bw)"

	# Extracting monitoring
	$DEBUG && debug "Writing $POD_NAME server metrics to $DATADIR/$POD_NAME-server.metrics"
	kubectl exec -it $NAMESPACEOPT $MONITOR_SERVER_POD_NAME \
		-- sh /stats.sh $STARTTIME $ENDTIME > $DATADIR/$POD_NAME-server.metrics

	$DEBUG && debug "Computing $POD_NAME server metrics average to $DATADIR/$POD_NAME-server.avg"
	
	tail -n +2 $DATADIR/$POD_NAME-server.metrics | LC_ALL=C awk '{M+=$6;U+=$1;N+=$2;S+=$3;I+=$4;T+=$5;} 
		END {
			print "cpu-user cpu-nice cpu-system cpu-iowait cpu-steal memory-used records-number"; 
			printf "%.2f %.2f %.2f %.2f %.2f %d %d\n",U/NR,N/NR,S/NR,I/NR,T/NR,M/NR,NR
		}' > $DATADIR/$POD_NAME-server.avg

	$DEBUG && debug "Writing $POD_NAME client metrics to $DATADIR/$POD_NAME-client.metrics"
	kubectl exec -it $NAMESPACEOPT $MONITOR_CLIENT_POD_NAME \
		-- sh /stats.sh $STARTTIME $ENDTIME > $DATADIR/$POD_NAME-client.metrics

	$DEBUG && debug "Computing $POD_NAME client metrics average to $DATADIR/$POD_NAME-client.avg"
	tail -n +2 $DATADIR/$POD_NAME-client.metrics | LC_ALL=C awk '{M+=$6;U+=$1;N+=$2;S+=$3;I+=$4;T+=$5;} 
		END {
			print "cpu-user cpu-nice cpu-system cpu-iowait cpu-steal memory-used records-number"; 
			printf "%.2f %.2f %.2f %.2f %.2f %d %d\n",U/NR,N/NR,S/NR,I/NR,T/NR,M/NR,NR
		}' > $DATADIR/$POD_NAME-client.avg
}

#==============================================================================
# Argument parsing
#==============================================================================

[ "$1" = "" ] && usage && exit

UNKNOWN_ARGLIST=""
while [ "$1" != "" ]
do
	arg=$1
	case $arg in
		--server-node|-sn)
			shift
			SERVER_NODE=$1
			info "Server node will be '$SERVER_NODE'"
			;;
		--client-node|-cn)
			shift
			CLIENT_NODE=$1
			info "Client node will be '$CLIENT_NODE'"
			;;
		--namespace|-n)
			shift
			NAMESPACEOPT="--namespace $1"
			info "Setting target namespace to '$1'"
			;;
		--timeout|-t)
			shift
			POD_WAIT_TIMEOUT="$1"
			info "Setting timeout to ${1}s"
			;;
		--socket-buffer-size|-sbs)
			shift
			SOCKET_BUFFER_SIZE="$1"
			info "Setting socket buffer size to ${1}"
			;;
		--duration|-d)
			shift
			BENCHMARK_DURATION="$1"
			info "Setting benchmark duration to ${1}s"
			;;
		--output|-o)
			shift
			
			# Checking values
			case $1 in
				json) ;;
				yaml) ;;
				text) ;;
				*) fatal "Unknown output format '$1'. Here is a list of acceptable formats : text, json, yaml";;
			esac
			
			info "Setting output format to ${1}s"
			OUTPUT_FORMAT="$1"
			;;
		--keep|-k)
			CLEANDIR="false"
			info "Keeping datadir after benchmark run"
			;;
		--verbose|-v)
			DEBUG_LEVEL=2
			;;
		--version|-V)
			echo "$VERSION" 
			exit
			;;
		--debug)
			DEBUG_LEVEL=3;
			DEBUG=true;
			debug "Mode debug ON"
			;;
		--debug-level)
			shift
			case $1 in
				standard|0) DEBUG_LEVEL=0; DEBUG=false;;
				warn|1) DEBUG_LEVEL=1; DEBUG=false;;
				info|2) DEBUG_LEVEL=2; DEBUG=false;;
				debug|3) DEBUG_LEVEL=3; DEBUG=true; debug "Mode debug ON";;
				*) fatal "Unknown debug level '$1'. Here is a list of acceptable debug levels : standard, warn, info, debug";;
			esac
			;;
		--help|-h)
			usage && exit
			;;
		*) UNKNOWN_ARGLIST="$UNKNOWN_ARGLIST $arg" ;;
	esac
	shift
done

[ "$UNKNOWN_ARGLIST" != "" ] && fatal "Unknown arguments : $UNKNOWN_ARGLIST"
$DEBUG && debug "Argument parsing done"

#==============================================================================
# Preflight checks
#==============================================================================

[ "$SERVER_NODE" = "" -o "$CLIENT_NODE" = "" ] \
	&& fatal "Both client node and server node must be set (--server-node and --client-node)"


#==============================================================================
# Preparation
#==============================================================================

DATADIR="$(mktemp -d)"

# Catching CTRL-C
trap ctrl_c INT
function ctrl_c {
        err "Trapped CTRL-C, trying to exit gracefully ..."
		cleanandexit 1
}


#==============================================================================
# Starting monitors
#==============================================================================

#--- Server monitor --------------------------------
MONITOR_SERVER_POD_NAME="knb-monitor-server-$EXECID"
$DEBUG && debug "Server monitor pod name will be $MONITOR_SERVER_POD_NAME"

info "Deploying server monitor on node $SERVER_NODE"
cat <<EOF | kubectl apply $NAMESPACEOPT -f - >/dev/null|| fatal "Cannot create server monitor pod"
apiVersion: v1
kind: Pod
metadata:
  labels:
    app: $MONITOR_SERVER_POD_NAME
  name: $MONITOR_SERVER_POD_NAME
spec:
  containers:
  - name: monitor
    image: infrabuilder/bench-custom-monitor
  nodeSelector:
    kubernetes.io/hostname: $SERVER_NODE
EOF

RESSOURCE_TO_CLEAN_BEFORE_EXIT="$RESSOURCE_TO_CLEAN_BEFORE_EXIT pod/$MONITOR_SERVER_POD_NAME"

info "Waiting for server monitor to be running"
waitpod $MONITOR_SERVER_POD_NAME Running $POD_WAIT_TIMEOUT \
	|| fatal "Failed to start server monitor pod"

#--- Client monitor --------------------------------
MONITOR_CLIENT_POD_NAME="knb-monitor-client-$EXECID"
$DEBUG && debug "Client monitor pod name will be $MONITOR_CLIENT_POD_NAME"

info "Deploying client monitor on node $CLIENT_NODE"
cat <<EOF | kubectl apply $NAMESPACEOPT -f - >/dev/null|| fatal "Cannot create client monitor pod"
apiVersion: v1
kind: Pod
metadata:
  labels:
    app: $MONITOR_CLIENT_POD_NAME
  name: $MONITOR_CLIENT_POD_NAME
spec:
  containers:
  - name: monitor
    image: infrabuilder/bench-custom-monitor
  nodeSelector:
    kubernetes.io/hostname: $CLIENT_NODE
EOF

RESSOURCE_TO_CLEAN_BEFORE_EXIT="$RESSOURCE_TO_CLEAN_BEFORE_EXIT pod/$MONITOR_CLIENT_POD_NAME"

info "Waiting for client monitor to be running"
waitpod $MONITOR_CLIENT_POD_NAME Running $POD_WAIT_TIMEOUT \
	|| fatal "Failed to start client monitor pod"

#==============================================================================
# Starting server
#==============================================================================

SERVER_POD_NAME="knb-server-$EXECID"
SERVER_SERVICE_NAME=$SERVER_POD_NAME
$DEBUG && debug "Server pod name will be $SERVER_POD_NAME"

info "Deploying iperf server on node $SERVER_NODE"
cat <<EOF | kubectl apply $NAMESPACEOPT -f - >/dev/null|| fatal "Cannot create server pod"
apiVersion: v1
kind: Pod
metadata:
  labels:
    app: $SERVER_POD_NAME
  name: $SERVER_POD_NAME
spec:
  containers:
  - name: iperf
    image: infrabuilder/netbench:server-iperf3
    args:
    - iperf3
    - -s
  nodeSelector:
    kubernetes.io/hostname: $SERVER_NODE
---
apiVersion: v1
kind: Service
metadata:
  name: $SERVER_SERVICE_NAME
spec:
  selector:
    app: $SERVER_POD_NAME
  ports:
    - protocol: TCP
      port: 5201
      targetPort: 5201
      name: tcp
    - protocol: UDP
      port: 5201
      targetPort: 5201
      name: udp
EOF

RESSOURCE_TO_CLEAN_BEFORE_EXIT="$RESSOURCE_TO_CLEAN_BEFORE_EXIT pod/$SERVER_POD_NAME"

info Waiting for server to be running
kubectl wait $NAMESPACEOPT --for=condition=Ready pod/$SERVER_POD_NAME --timeout=${POD_WAIT_TIMEOUT}s >/dev/null \
	|| fatal "Failed to start server pod"

SERVER_IP=$(kubectl get $NAMESPACEOPT pod $SERVER_POD_NAME -o jsonpath={.status.podIP})
$DEBUG && debug "Server IP address is $SERVER_IP"

#==============================================================================
# Idle 
#==============================================================================

IDLE_POD_NAME="knb-client-idle-$EXECID"
$DEBUG && debug "Client Idle pod name will be $IDLE_POD_NAME"
start-client $IDLE_POD_NAME $SERVER_IP idle

#==============================================================================
# Pod to Pod
#==============================================================================

#--- TCP -------------------------------------------
CLIENT_TCP_P2P_POD_NAME="knb-client-tcp-p2p-$EXECID"
$DEBUG && debug "Client TCP P2P pod name will be $CLIENT_TCP_P2P_POD_NAME"
start-client $CLIENT_TCP_P2P_POD_NAME $SERVER_IP tcp

#--- UDP -------------------------------------------
CLIENT_UDP_P2P_POD_NAME="knb-client-udp-p2p-$EXECID"
$DEBUG && debug "Client UDP P2P pod name will be $CLIENT_UDP_P2P_POD_NAME"
start-client $CLIENT_UDP_P2P_POD_NAME $SERVER_IP udp

#==============================================================================
# Pod to Service
#==============================================================================

#--- TCP -------------------------------------------
CLIENT_TCP_P2S_POD_NAME="knb-client-tcp-p2s-$EXECID"
$DEBUG && debug "Client TCP P2S pod name will be $CLIENT_TCP_P2S_POD_NAME"
start-client $CLIENT_TCP_P2S_POD_NAME $SERVER_SERVICE_NAME tcp

#--- UDP -------------------------------------------

CLIENT_UDP_P2S_POD_NAME="knb-client-udp-p2s-$EXECID"
$DEBUG && debug "Client UDP P2S pod name will be $CLIENT_UDP_P2S_POD_NAME"
start-client $CLIENT_UDP_P2S_POD_NAME $SERVER_SERVICE_NAME udp

#==============================================================================
# Output
#==============================================================================
case $OUTPUT_FORMAT in
	json)

		function compute-json-result {
			POD_NAME=$1
			echo "        \"bandwidth\": $(cat $DATADIR/$POD_NAME.bw),"
			
			AVGMETRICS=$(awk 'NR==2' $DATADIR/$POD_NAME-client.avg)
			$DEBUG && debug "pod $POD_NAME client metrics avg : $AVGMETRICS "
			echo "        \"client\": {"
			echo "          \"cpu\": {"
			echo "            \"user\": $(awk '{print $1}' <<< $AVGMETRICS),"
			echo "            \"nice\": $(awk '{print $2}' <<< $AVGMETRICS),"
			echo "            \"system\": $(awk '{print $3}' <<< $AVGMETRICS),"
			echo "            \"iowait\": $(awk '{print $4}' <<< $AVGMETRICS),"
			echo "            \"steal\": $(awk '{print $5}' <<< $AVGMETRICS)"
			echo "          },"
			echo "          \"ram\": $(awk '{print $6}' <<< $AVGMETRICS)"
			echo "        },"

			AVGMETRICS=$(awk 'NR==2' $DATADIR/$POD_NAME-server.avg)
			$DEBUG && debug "pod $POD_NAME server metrics avg : $AVGMETRICS "
			echo "        \"server\": {"
			echo "          \"cpu\": {"
			echo "            \"user\": $(awk '{print $1}' <<< $AVGMETRICS),"
			echo "            \"nice\": $(awk '{print $2}' <<< $AVGMETRICS),"
			echo "            \"system\": $(awk '{print $3}' <<< $AVGMETRICS),"
			echo "            \"iowait\": $(awk '{print $4}' <<< $AVGMETRICS),"
			echo "            \"steal\": $(awk '{print $5}' <<< $AVGMETRICS)"
			echo "          },"
			echo "          \"ram\": $(awk '{print $6}' <<< $AVGMETRICS)"
			echo "        }"
		}

		echo "{"
		echo "  \"metadata\": {"
		echo "    \"generator\": \"https://github.com/InfraBuilder/k8s-bench-suite\","
		echo "    \"version\": \"$VERSION\","
		echo "    \"date\": \"$(date "+%Y-%m-%d %H:%M:%S")\","
		echo "    \"server-node\": \"$SERVER_NODE\","
		echo "    \"client-node\": \"$CLIENT_NODE\""
		echo "  },"
		echo "  \"data\": {"
		echo "    \"idle\": {"
			compute-json-result $IDLE_POD_NAME
		echo "    },"
		echo "    \"pod2pod\": {"
		echo "      \"tcp\": {"
			compute-json-result $CLIENT_TCP_P2P_POD_NAME
		echo "      },"
		echo "      \"udp\": {"
			compute-json-result $CLIENT_UDP_P2P_POD_NAME
		echo "      }"
		echo "    },"
		echo "    \"pod2svc\": {"
		echo "      \"tcp\": {"
			compute-json-result $CLIENT_TCP_P2S_POD_NAME
		echo "      },"
		echo "      \"udp\": {"
			compute-json-result $CLIENT_UDP_P2S_POD_NAME
		echo "      }"
		echo "    }"
		echo "  }"
		echo "}"
		;;
	yaml)
		function compute-yaml-result {
			POD_NAME=$1
			echo "      bandwidth: $(cat $DATADIR/$POD_NAME.bw)"
			AVGMETRICS=$(awk 'NR==2' $DATADIR/$POD_NAME-client.avg)
			$DEBUG && debug "pod $POD_NAME client metrics avg : $AVGMETRICS "
			echo "      client:"
			echo "        cpu:"
			echo "          user: $(awk '{print $1}' <<< $AVGMETRICS)"
			echo "          nice: $(awk '{print $2}' <<< $AVGMETRICS)"
			echo "          system: $(awk '{print $3}' <<< $AVGMETRICS)"
			echo "          iowait: $(awk '{print $4}' <<< $AVGMETRICS)"
			echo "          steal: $(awk '{print $5}' <<< $AVGMETRICS)"
			echo "        ram: $(awk '{print $6}' <<< $AVGMETRICS)"

			AVGMETRICS=$(awk 'NR==2' $DATADIR/$POD_NAME-server.avg)
			$DEBUG && debug "pod $POD_NAME server metrics avg : $AVGMETRICS "
			echo "      server:"
			echo "        cpu:"
			echo "          user: $(awk '{print $1}' <<< $AVGMETRICS)"
			echo "          nice: $(awk '{print $2}' <<< $AVGMETRICS)"
			echo "          system: $(awk '{print $3}' <<< $AVGMETRICS)"
			echo "          iowait: $(awk '{print $4}' <<< $AVGMETRICS)"
			echo "          steal: $(awk '{print $5}' <<< $AVGMETRICS)"
			echo "        ram: $(awk '{print $6}' <<< $AVGMETRICS)"
		}

		echo "metadata:"
		echo "  generator: \"https://github.com/InfraBuilder/k8s-bench-suite\""
		echo "  version: \"$VERSION\""
		echo "  date: \"$(date "+%Y-%m-%d %H:%M:%S")\""
		echo "  server-node: \"$SERVER_NODE\""
		echo "  client-node: \"$CLIENT_NODE\""
		echo "data:"
		echo "  idle:"
			compute-yaml-result $IDLE_POD_NAME
		echo "  pod2pod:"
		echo "    tcp:"
			compute-yaml-result $CLIENT_TCP_P2P_POD_NAME
		echo "    udp:"
			compute-yaml-result $CLIENT_UDP_P2P_POD_NAME
		echo "  pod2svc:"
		echo "    tcp:"
			compute-yaml-result $CLIENT_TCP_P2S_POD_NAME
		echo "    udp:"
			compute-yaml-result $CLIENT_UDP_P2P_POD_NAME
		;;
	*)

		function compute-text-result {
			POD_NAME=$1
			echo "      bandwidth = $(cat $DATADIR/$POD_NAME.bw) Mbit/s"
			# cpu-user cpu-nice cpu-system cpu-iowait cpu-steal memory-used records-number
			echo "      client cpu = $(awk 'NR==2 {print "user "$1"%, nice "$2"%, system "$3"%, iowait "$4"%, steal "$5"%"}' $DATADIR/$POD_NAME-client.avg)"
			echo "      server cpu = $(awk 'NR==2 {print "user "$1"%, nice "$2"%, system "$3"%, iowait "$4"%, steal "$5"%"}' $DATADIR/$POD_NAME-server.avg)"
			echo "      client ram = $(awk 'NR==2 {print $6}' $DATADIR/$POD_NAME-client.avg) MB"
			echo "      server ram = $(awk 'NR==2 {print $6}' $DATADIR/$POD_NAME-server.avg) MB"
		}
		echo "========================================================="
		echo " Results"
		echo "========================================================="
		echo "  Idle :"
			compute-text-result $IDLE_POD_NAME
		echo "  Pod to pod :"
		echo "    TCP :"
			compute-text-result $CLIENT_TCP_P2P_POD_NAME
		echo "    UDP :"
			compute-text-result $CLIENT_UDP_P2P_POD_NAME
		echo "  Pod to Service :"
		echo "    TCP :"
			compute-text-result $CLIENT_TCP_P2S_POD_NAME
		echo "    UDP :"
			compute-text-result $CLIENT_UDP_P2S_POD_NAME
		echo "========================================================="
		;;
esac

#==============================================================================
# Cleaning
#==============================================================================

info "Cleaning kubernetes resources ..."
cleanandexit